import { ElementwiseApply } from "./genericArrays";

`
1  1  1  1
1 -1  1 -1
1  1 -1 -1
1 -1 -1  1

Hx = [ h  h ][x1] = [hx1 + hx2]
     [ h -h ][x2]   [hx1 - hx2]

Max(Abs(Hx)) = Max(Abs(Hx1) + Abs(Hx2))
`;

export enum BIT {
    OFF = 1,
    ON = -1,
}

export function BitArrayToBigInt(x: Word): bigint {
    let t = 0n;
    for (const b of x) {
        t = (t << 1n) + (b === BIT.ON ? 1n : 0n);
    }
    return t;
}

export function BigIntToBitArray(x: bigint, l: number): Word {
    let t: Word = [];
    for (let i = 0n; i < l; i++) {
        t.push(((x >> i) & 1n) === 1n ? BIT.ON : BIT.OFF);
    }
    t = t.reverse();
    return t;
}

export function SingleBitXor(b1: BIT, b2: BIT): BIT {
    return b1 * b2;
}

export function SingleBitAnd(b1: BIT, b2: BIT): BIT {
    return 1 - ((1 - b1) * (1 - b2)) / 2;
}

export type Word = BIT[];
export type NestedWord<T extends Word> = [...T, ...T];
export type Word2 = NestedWord<[BIT]>;
export type Word4 = NestedWord<Word2>;
export type Word8 = NestedWord<Word4>;
export type Word16 = NestedWord<Word8>;
export type Word32 = NestedWord<Word16>;
export type Word64 = NestedWord<Word32>;
export type Word128 = NestedWord<Word64>;
export type Word256 = NestedWord<Word128>;
export function IsWord2(x: Word): x is Word2 {
    return x.length === 2;
}
export function IsWord4(x: Word): x is Word4 {
    return x.length === 4;
}
export function IsWord8(x: Word): x is Word8 {
    return x.length === 8;
}
export function IsWord16(x: Word): x is Word16 {
    return x.length === 16;
}
export function IsWord32(x: Word): x is Word32 {
    return x.length === 32;
}
export function IsWord64(x: Word): x is Word64 {
    return x.length === 64;
}
export function IsWord128(x: Word): x is Word128 {
    return x.length === 128;
}
export function IsWord256(x: Word): x is Word256 {
    return x.length === 256;
}

export function BitwiseXor(x1: Word2, x2: Word2): Word2;
export function BitwiseXor(x1: Word4, x2: Word4): Word4;
export function BitwiseXor(x1: Word8, x2: Word8): Word8;
export function BitwiseXor(x1: Word16, x2: Word16): Word16;
export function BitwiseXor(x1: Word32, x2: Word32): Word32;
export function BitwiseXor(x1: Word64, x2: Word64): Word64;
export function BitwiseXor(x1: Word128, x2: Word128): Word128;
export function BitwiseXor(x1: Word256, x2: Word256): Word256;
export function BitwiseXor(x1: Word, x2: Word): Word {
    return ElementwiseApply(x1, x2, SingleBitXor);
}

export function BitwiseAnd(x1: Word2, x2: Word2): Word2;
export function BitwiseAnd(x1: Word4, x2: Word4): Word4;
export function BitwiseAnd(x1: Word8, x2: Word8): Word8;
export function BitwiseAnd(x1: Word16, x2: Word16): Word16;
export function BitwiseAnd(x1: Word32, x2: Word32): Word32;
export function BitwiseAnd(x1: Word64, x2: Word64): Word64;
export function BitwiseAnd(x1: Word128, x2: Word128): Word128;
export function BitwiseAnd(x1: Word256, x2: Word256): Word256;
export function BitwiseAnd(x1: Word, x2: Word): Word {
    return ElementwiseApply(x1, x2, SingleBitAnd);
}

export function NL(x: Word): number {
    if (x.length == 2) {
        return 0;
    } else {
        const l = x.length / 2;
        const x1 = x.slice(0, l);
        const x2 = x.slice(l);
        const hx1 = FFT(x1);
        const hx2 = FFT(x2);
        let m = 0;
        for (let i = 0; i < l; i++) {
            const t = Math.abs(hx1[i]) + Math.abs(hx2[i]);
            if (t > m) {
                m = t;
            }
        }
        return l - m / 2;
    }
}

export function FlipBit(b: BIT): BIT {
    return -b;
}

export function nextBent(b: Word): Word {
    return [...b, ...b, ...b, ...b.map((i) => FlipBit(i))];
}

export const b1 = [BIT.OFF];
export const b4 = nextBent(b1) as Word4;
export const b16 = nextBent(b4) as Word16;
export const b64 = nextBent(b16) as Word64;
export const b256 = nextBent(b64) as Word256;
export const b1bi = BitArrayToBigInt(b1);
export const b4bi = BitArrayToBigInt(b4);
export const b16bi = BitArrayToBigInt(b16);
export const b64bi = BitArrayToBigInt(b64);
export const b256bi = BitArrayToBigInt(b256);

export function FFT(x: Word2): number[];
export function FFT(x: Word4): number[];
export function FFT(x: Word8): number[];
export function FFT(x: Word16): number[];
export function FFT(x: Word32): number[];
export function FFT(x: Word64): number[];
export function FFT(x: Word128): number[];
export function FFT(x: Word256): number[];
export function FFT(x: Word): number[];
export function FFT(x: Word): number[] {
    if (IsWord2(x)) {
        return FFT2(x);
    } else if (IsWord4(x)) {
        return FFT4(x);
    } else if (IsWord8(x)) {
        return FFT8(x);
    } else if (IsWord16(x)) {
        return FFT16(x);
    } else if (IsWord32(x)) {
        return FFT32(x);
    } else if (IsWord64(x)) {
        return FFT64(x);
    } else if (IsWord128(x)) {
        return FFT128(x);
    } else if (IsWord256(x)) {
        return FFT256(x);
    } else {
        return FFTDefault(x);
    }
}

export function FFT2(x: Word2): number[] {
    return [x[0] + x[1], x[0] - x[1]];
}

export function FFT4(x: Word4): number[] {
    const hx1 = FFT2([x[0], x[1]]);
    const hx2 = FFT2([x[2], x[3]]);
    return [hx1[0] + hx2[0], hx1[1] + hx2[1], hx1[0] - hx2[0], hx1[1] - hx2[1]];
}

export function FFT8(x: Word8): number[] {
    const hx1 = FFT4([x[0], x[1], x[2], x[3]]);
    const hx2 = FFT4([x[4], x[5], x[6], x[7]]);
    return [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
    ];
}

export function FFT16(x: Word16): number[] {
    const hx1 = FFT8([x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]]);
    const hx2 = FFT8([x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15]]);
    const r = [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[4] + hx2[4],
        hx1[5] + hx2[5],
        hx1[6] + hx2[6],
        hx1[7] + hx2[7],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
        hx1[4] - hx2[4],
        hx1[5] - hx2[5],
        hx1[6] - hx2[6],
        hx1[7] - hx2[7],
    ];
    return r;
}

export function FFT32(x: Word32): number[] {
    const hx1 = FFT16([
        x[0],
        x[1],
        x[2],
        x[3],
        x[4],
        x[5],
        x[6],
        x[7],
        x[8],
        x[9],
        x[10],
        x[11],
        x[12],
        x[13],
        x[14],
        x[15],
    ]);
    const hx2 = FFT16([
        x[16],
        x[17],
        x[18],
        x[19],
        x[20],
        x[21],
        x[22],
        x[23],
        x[24],
        x[25],
        x[26],
        x[27],
        x[28],
        x[29],
        x[30],
        x[31],
    ]);
    return [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[4] + hx2[4],
        hx1[5] + hx2[5],
        hx1[6] + hx2[6],
        hx1[7] + hx2[7],
        hx1[8] + hx2[8],
        hx1[9] + hx2[9],
        hx1[10] + hx2[10],
        hx1[11] + hx2[11],
        hx1[12] + hx2[12],
        hx1[13] + hx2[13],
        hx1[14] + hx2[14],
        hx1[15] + hx2[15],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
        hx1[4] - hx2[4],
        hx1[5] - hx2[5],
        hx1[6] - hx2[6],
        hx1[7] - hx2[7],
        hx1[8] - hx2[8],
        hx1[9] - hx2[9],
        hx1[10] - hx2[10],
        hx1[11] - hx2[11],
        hx1[12] - hx2[12],
        hx1[13] - hx2[13],
        hx1[14] - hx2[14],
        hx1[15] - hx2[15],
    ];
}

export function FFT64(x: Word64): number[] {
    const hx1 = FFT32([
        x[0],
        x[1],
        x[2],
        x[3],
        x[4],
        x[5],
        x[6],
        x[7],
        x[8],
        x[9],
        x[10],
        x[11],
        x[12],
        x[13],
        x[14],
        x[15],
        x[16],
        x[17],
        x[18],
        x[19],
        x[20],
        x[21],
        x[22],
        x[23],
        x[24],
        x[25],
        x[26],
        x[27],
        x[28],
        x[29],
        x[30],
        x[31],
    ]);
    const hx2 = FFT32([
        x[32],
        x[33],
        x[34],
        x[35],
        x[36],
        x[37],
        x[38],
        x[39],
        x[40],
        x[41],
        x[42],
        x[43],
        x[44],
        x[45],
        x[46],
        x[47],
        x[48],
        x[49],
        x[50],
        x[51],
        x[52],
        x[53],
        x[54],
        x[55],
        x[56],
        x[57],
        x[58],
        x[59],
        x[60],
        x[61],
        x[62],
        x[63],
    ]);
    return [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[4] + hx2[4],
        hx1[5] + hx2[5],
        hx1[6] + hx2[6],
        hx1[7] + hx2[7],
        hx1[8] + hx2[8],
        hx1[9] + hx2[9],
        hx1[10] + hx2[10],
        hx1[11] + hx2[11],
        hx1[12] + hx2[12],
        hx1[13] + hx2[13],
        hx1[14] + hx2[14],
        hx1[15] + hx2[15],
        hx1[16] + hx2[16],
        hx1[17] + hx2[17],
        hx1[18] + hx2[18],
        hx1[19] + hx2[19],
        hx1[20] + hx2[20],
        hx1[21] + hx2[21],
        hx1[22] + hx2[22],
        hx1[23] + hx2[23],
        hx1[24] + hx2[24],
        hx1[25] + hx2[25],
        hx1[26] + hx2[26],
        hx1[27] + hx2[27],
        hx1[28] + hx2[28],
        hx1[29] + hx2[29],
        hx1[30] + hx2[30],
        hx1[31] + hx2[31],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
        hx1[4] - hx2[4],
        hx1[5] - hx2[5],
        hx1[6] - hx2[6],
        hx1[7] - hx2[7],
        hx1[8] - hx2[8],
        hx1[9] - hx2[9],
        hx1[10] - hx2[10],
        hx1[11] - hx2[11],
        hx1[12] - hx2[12],
        hx1[13] - hx2[13],
        hx1[14] - hx2[14],
        hx1[15] - hx2[15],
        hx1[16] - hx2[16],
        hx1[17] - hx2[17],
        hx1[18] - hx2[18],
        hx1[19] - hx2[19],
        hx1[20] - hx2[20],
        hx1[21] - hx2[21],
        hx1[22] - hx2[22],
        hx1[23] - hx2[23],
        hx1[24] - hx2[24],
        hx1[25] - hx2[25],
        hx1[26] - hx2[26],
        hx1[27] - hx2[27],
        hx1[28] - hx2[28],
        hx1[29] - hx2[29],
        hx1[30] - hx2[30],
        hx1[31] - hx2[31],
    ];
}

export function FFT128(x: Word128): number[] {
    const hx1 = FFT64([
        x[0],
        x[1],
        x[2],
        x[3],
        x[4],
        x[5],
        x[6],
        x[7],
        x[8],
        x[9],
        x[10],
        x[11],
        x[12],
        x[13],
        x[14],
        x[15],
        x[16],
        x[17],
        x[18],
        x[19],
        x[20],
        x[21],
        x[22],
        x[23],
        x[24],
        x[25],
        x[26],
        x[27],
        x[28],
        x[29],
        x[30],
        x[31],
        x[32],
        x[33],
        x[34],
        x[35],
        x[36],
        x[37],
        x[38],
        x[39],
        x[40],
        x[41],
        x[42],
        x[43],
        x[44],
        x[45],
        x[46],
        x[47],
        x[48],
        x[49],
        x[50],
        x[51],
        x[52],
        x[53],
        x[54],
        x[55],
        x[56],
        x[57],
        x[58],
        x[59],
        x[60],
        x[61],
        x[62],
        x[63],
    ]);
    const hx2 = FFT64([
        x[64],
        x[65],
        x[66],
        x[67],
        x[68],
        x[69],
        x[70],
        x[71],
        x[72],
        x[73],
        x[74],
        x[75],
        x[76],
        x[77],
        x[78],
        x[79],
        x[80],
        x[81],
        x[82],
        x[83],
        x[84],
        x[85],
        x[86],
        x[87],
        x[88],
        x[89],
        x[90],
        x[91],
        x[92],
        x[93],
        x[94],
        x[95],
        x[96],
        x[97],
        x[98],
        x[99],
        x[100],
        x[101],
        x[102],
        x[103],
        x[104],
        x[105],
        x[106],
        x[107],
        x[108],
        x[109],
        x[110],
        x[111],
        x[112],
        x[113],
        x[114],
        x[115],
        x[116],
        x[117],
        x[118],
        x[119],
        x[120],
        x[121],
        x[122],
        x[123],
        x[124],
        x[125],
        x[126],
        x[127],
    ]);
    return [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[4] + hx2[4],
        hx1[5] + hx2[5],
        hx1[6] + hx2[6],
        hx1[7] + hx2[7],
        hx1[8] + hx2[8],
        hx1[9] + hx2[9],
        hx1[10] + hx2[10],
        hx1[11] + hx2[11],
        hx1[12] + hx2[12],
        hx1[13] + hx2[13],
        hx1[14] + hx2[14],
        hx1[15] + hx2[15],
        hx1[16] + hx2[16],
        hx1[17] + hx2[17],
        hx1[18] + hx2[18],
        hx1[19] + hx2[19],
        hx1[20] + hx2[20],
        hx1[21] + hx2[21],
        hx1[22] + hx2[22],
        hx1[23] + hx2[23],
        hx1[24] + hx2[24],
        hx1[25] + hx2[25],
        hx1[26] + hx2[26],
        hx1[27] + hx2[27],
        hx1[28] + hx2[28],
        hx1[29] + hx2[29],
        hx1[30] + hx2[30],
        hx1[31] + hx2[31],
        hx1[32] + hx2[32],
        hx1[33] + hx2[33],
        hx1[34] + hx2[34],
        hx1[35] + hx2[35],
        hx1[36] + hx2[36],
        hx1[37] + hx2[37],
        hx1[38] + hx2[38],
        hx1[39] + hx2[39],
        hx1[40] + hx2[40],
        hx1[41] + hx2[41],
        hx1[42] + hx2[42],
        hx1[43] + hx2[43],
        hx1[44] + hx2[44],
        hx1[45] + hx2[45],
        hx1[46] + hx2[46],
        hx1[47] + hx2[47],
        hx1[48] + hx2[48],
        hx1[49] + hx2[49],
        hx1[50] + hx2[50],
        hx1[51] + hx2[51],
        hx1[52] + hx2[52],
        hx1[53] + hx2[53],
        hx1[54] + hx2[54],
        hx1[55] + hx2[55],
        hx1[56] + hx2[56],
        hx1[57] + hx2[57],
        hx1[58] + hx2[58],
        hx1[59] + hx2[59],
        hx1[60] + hx2[60],
        hx1[61] + hx2[61],
        hx1[62] + hx2[62],
        hx1[63] + hx2[63],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
        hx1[4] - hx2[4],
        hx1[5] - hx2[5],
        hx1[6] - hx2[6],
        hx1[7] - hx2[7],
        hx1[8] - hx2[8],
        hx1[9] - hx2[9],
        hx1[10] - hx2[10],
        hx1[11] - hx2[11],
        hx1[12] - hx2[12],
        hx1[13] - hx2[13],
        hx1[14] - hx2[14],
        hx1[15] - hx2[15],
        hx1[16] - hx2[16],
        hx1[17] - hx2[17],
        hx1[18] - hx2[18],
        hx1[19] - hx2[19],
        hx1[20] - hx2[20],
        hx1[21] - hx2[21],
        hx1[22] - hx2[22],
        hx1[23] - hx2[23],
        hx1[24] - hx2[24],
        hx1[25] - hx2[25],
        hx1[26] - hx2[26],
        hx1[27] - hx2[27],
        hx1[28] - hx2[28],
        hx1[29] - hx2[29],
        hx1[30] - hx2[30],
        hx1[31] - hx2[31],
        hx1[32] - hx2[32],
        hx1[33] - hx2[33],
        hx1[34] - hx2[34],
        hx1[35] - hx2[35],
        hx1[36] - hx2[36],
        hx1[37] - hx2[37],
        hx1[38] - hx2[38],
        hx1[39] - hx2[39],
        hx1[40] - hx2[40],
        hx1[41] - hx2[41],
        hx1[42] - hx2[42],
        hx1[43] - hx2[43],
        hx1[44] - hx2[44],
        hx1[45] - hx2[45],
        hx1[46] - hx2[46],
        hx1[47] - hx2[47],
        hx1[48] - hx2[48],
        hx1[49] - hx2[49],
        hx1[50] - hx2[50],
        hx1[51] - hx2[51],
        hx1[52] - hx2[52],
        hx1[53] - hx2[53],
        hx1[54] - hx2[54],
        hx1[55] - hx2[55],
        hx1[56] - hx2[56],
        hx1[57] - hx2[57],
        hx1[58] - hx2[58],
        hx1[59] - hx2[59],
        hx1[60] - hx2[60],
        hx1[61] - hx2[61],
        hx1[62] - hx2[62],
        hx1[63] - hx2[63],
    ];
}

export function FFT256(x: Word256): number[] {
    const hx1 = FFT128([
        x[0],
        x[1],
        x[2],
        x[3],
        x[4],
        x[5],
        x[6],
        x[7],
        x[8],
        x[9],
        x[10],
        x[11],
        x[12],
        x[13],
        x[14],
        x[15],
        x[16],
        x[17],
        x[18],
        x[19],
        x[20],
        x[21],
        x[22],
        x[23],
        x[24],
        x[25],
        x[26],
        x[27],
        x[28],
        x[29],
        x[30],
        x[31],
        x[32],
        x[33],
        x[34],
        x[35],
        x[36],
        x[37],
        x[38],
        x[39],
        x[40],
        x[41],
        x[42],
        x[43],
        x[44],
        x[45],
        x[46],
        x[47],
        x[48],
        x[49],
        x[50],
        x[51],
        x[52],
        x[53],
        x[54],
        x[55],
        x[56],
        x[57],
        x[58],
        x[59],
        x[60],
        x[61],
        x[62],
        x[63],
        x[64],
        x[65],
        x[66],
        x[67],
        x[68],
        x[69],
        x[70],
        x[71],
        x[72],
        x[73],
        x[74],
        x[75],
        x[76],
        x[77],
        x[78],
        x[79],
        x[80],
        x[81],
        x[82],
        x[83],
        x[84],
        x[85],
        x[86],
        x[87],
        x[88],
        x[89],
        x[90],
        x[91],
        x[92],
        x[93],
        x[94],
        x[95],
        x[96],
        x[97],
        x[98],
        x[99],
        x[100],
        x[101],
        x[102],
        x[103],
        x[104],
        x[105],
        x[106],
        x[107],
        x[108],
        x[109],
        x[110],
        x[111],
        x[112],
        x[113],
        x[114],
        x[115],
        x[116],
        x[117],
        x[118],
        x[119],
        x[120],
        x[121],
        x[122],
        x[123],
        x[124],
        x[125],
        x[126],
        x[127],
    ]);
    const hx2 = FFT128([
        x[128],
        x[129],
        x[130],
        x[131],
        x[132],
        x[133],
        x[134],
        x[135],
        x[136],
        x[137],
        x[138],
        x[139],
        x[140],
        x[141],
        x[142],
        x[143],
        x[144],
        x[145],
        x[146],
        x[147],
        x[148],
        x[149],
        x[150],
        x[151],
        x[152],
        x[153],
        x[154],
        x[155],
        x[156],
        x[157],
        x[158],
        x[159],
        x[160],
        x[161],
        x[162],
        x[163],
        x[164],
        x[165],
        x[166],
        x[167],
        x[168],
        x[169],
        x[170],
        x[171],
        x[172],
        x[173],
        x[174],
        x[175],
        x[176],
        x[177],
        x[178],
        x[179],
        x[180],
        x[181],
        x[182],
        x[183],
        x[184],
        x[185],
        x[186],
        x[187],
        x[188],
        x[189],
        x[190],
        x[191],
        x[192],
        x[193],
        x[194],
        x[195],
        x[196],
        x[197],
        x[198],
        x[199],
        x[200],
        x[201],
        x[202],
        x[203],
        x[204],
        x[205],
        x[206],
        x[207],
        x[208],
        x[209],
        x[210],
        x[211],
        x[212],
        x[213],
        x[214],
        x[215],
        x[216],
        x[217],
        x[218],
        x[219],
        x[220],
        x[221],
        x[222],
        x[223],
        x[224],
        x[225],
        x[226],
        x[227],
        x[228],
        x[229],
        x[230],
        x[231],
        x[232],
        x[233],
        x[234],
        x[235],
        x[236],
        x[237],
        x[238],
        x[239],
        x[240],
        x[241],
        x[242],
        x[243],
        x[244],
        x[245],
        x[246],
        x[247],
        x[248],
        x[249],
        x[250],
        x[251],
        x[252],
        x[253],
        x[254],
        x[255],
    ]);
    return [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[4] + hx2[4],
        hx1[5] + hx2[5],
        hx1[6] + hx2[6],
        hx1[7] + hx2[7],
        hx1[8] + hx2[8],
        hx1[9] + hx2[9],
        hx1[10] + hx2[10],
        hx1[11] + hx2[11],
        hx1[12] + hx2[12],
        hx1[13] + hx2[13],
        hx1[14] + hx2[14],
        hx1[15] + hx2[15],
        hx1[16] + hx2[16],
        hx1[17] + hx2[17],
        hx1[18] + hx2[18],
        hx1[19] + hx2[19],
        hx1[20] + hx2[20],
        hx1[21] + hx2[21],
        hx1[22] + hx2[22],
        hx1[23] + hx2[23],
        hx1[24] + hx2[24],
        hx1[25] + hx2[25],
        hx1[26] + hx2[26],
        hx1[27] + hx2[27],
        hx1[28] + hx2[28],
        hx1[29] + hx2[29],
        hx1[30] + hx2[30],
        hx1[31] + hx2[31],
        hx1[32] + hx2[32],
        hx1[33] + hx2[33],
        hx1[34] + hx2[34],
        hx1[35] + hx2[35],
        hx1[36] + hx2[36],
        hx1[37] + hx2[37],
        hx1[38] + hx2[38],
        hx1[39] + hx2[39],
        hx1[40] + hx2[40],
        hx1[41] + hx2[41],
        hx1[42] + hx2[42],
        hx1[43] + hx2[43],
        hx1[44] + hx2[44],
        hx1[45] + hx2[45],
        hx1[46] + hx2[46],
        hx1[47] + hx2[47],
        hx1[48] + hx2[48],
        hx1[49] + hx2[49],
        hx1[50] + hx2[50],
        hx1[51] + hx2[51],
        hx1[52] + hx2[52],
        hx1[53] + hx2[53],
        hx1[54] + hx2[54],
        hx1[55] + hx2[55],
        hx1[56] + hx2[56],
        hx1[57] + hx2[57],
        hx1[58] + hx2[58],
        hx1[59] + hx2[59],
        hx1[60] + hx2[60],
        hx1[61] + hx2[61],
        hx1[62] + hx2[62],
        hx1[63] + hx2[63],
        hx1[64] + hx2[64],
        hx1[65] + hx2[65],
        hx1[66] + hx2[66],
        hx1[67] + hx2[67],
        hx1[68] + hx2[68],
        hx1[69] + hx2[69],
        hx1[70] + hx2[70],
        hx1[71] + hx2[71],
        hx1[72] + hx2[72],
        hx1[73] + hx2[73],
        hx1[74] + hx2[74],
        hx1[75] + hx2[75],
        hx1[76] + hx2[76],
        hx1[77] + hx2[77],
        hx1[78] + hx2[78],
        hx1[79] + hx2[79],
        hx1[80] + hx2[80],
        hx1[81] + hx2[81],
        hx1[82] + hx2[82],
        hx1[83] + hx2[83],
        hx1[84] + hx2[84],
        hx1[85] + hx2[85],
        hx1[86] + hx2[86],
        hx1[87] + hx2[87],
        hx1[88] + hx2[88],
        hx1[89] + hx2[89],
        hx1[90] + hx2[90],
        hx1[91] + hx2[91],
        hx1[92] + hx2[92],
        hx1[93] + hx2[93],
        hx1[94] + hx2[94],
        hx1[95] + hx2[95],
        hx1[96] + hx2[96],
        hx1[97] + hx2[97],
        hx1[98] + hx2[98],
        hx1[99] + hx2[99],
        hx1[100] + hx2[100],
        hx1[101] + hx2[101],
        hx1[102] + hx2[102],
        hx1[103] + hx2[103],
        hx1[104] + hx2[104],
        hx1[105] + hx2[105],
        hx1[106] + hx2[106],
        hx1[107] + hx2[107],
        hx1[108] + hx2[108],
        hx1[109] + hx2[109],
        hx1[110] + hx2[110],
        hx1[111] + hx2[111],
        hx1[112] + hx2[112],
        hx1[113] + hx2[113],
        hx1[114] + hx2[114],
        hx1[115] + hx2[115],
        hx1[116] + hx2[116],
        hx1[117] + hx2[117],
        hx1[118] + hx2[118],
        hx1[119] + hx2[119],
        hx1[120] + hx2[120],
        hx1[121] + hx2[121],
        hx1[122] + hx2[122],
        hx1[123] + hx2[123],
        hx1[124] + hx2[124],
        hx1[125] + hx2[125],
        hx1[126] + hx2[126],
        hx1[127] + hx2[127],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
        hx1[4] - hx2[4],
        hx1[5] - hx2[5],
        hx1[6] - hx2[6],
        hx1[7] - hx2[7],
        hx1[8] - hx2[8],
        hx1[9] - hx2[9],
        hx1[10] - hx2[10],
        hx1[11] - hx2[11],
        hx1[12] - hx2[12],
        hx1[13] - hx2[13],
        hx1[14] - hx2[14],
        hx1[15] - hx2[15],
        hx1[16] - hx2[16],
        hx1[17] - hx2[17],
        hx1[18] - hx2[18],
        hx1[19] - hx2[19],
        hx1[20] - hx2[20],
        hx1[21] - hx2[21],
        hx1[22] - hx2[22],
        hx1[23] - hx2[23],
        hx1[24] - hx2[24],
        hx1[25] - hx2[25],
        hx1[26] - hx2[26],
        hx1[27] - hx2[27],
        hx1[28] - hx2[28],
        hx1[29] - hx2[29],
        hx1[30] - hx2[30],
        hx1[31] - hx2[31],
        hx1[32] - hx2[32],
        hx1[33] - hx2[33],
        hx1[34] - hx2[34],
        hx1[35] - hx2[35],
        hx1[36] - hx2[36],
        hx1[37] - hx2[37],
        hx1[38] - hx2[38],
        hx1[39] - hx2[39],
        hx1[40] - hx2[40],
        hx1[41] - hx2[41],
        hx1[42] - hx2[42],
        hx1[43] - hx2[43],
        hx1[44] - hx2[44],
        hx1[45] - hx2[45],
        hx1[46] - hx2[46],
        hx1[47] - hx2[47],
        hx1[48] - hx2[48],
        hx1[49] - hx2[49],
        hx1[50] - hx2[50],
        hx1[51] - hx2[51],
        hx1[52] - hx2[52],
        hx1[53] - hx2[53],
        hx1[54] - hx2[54],
        hx1[55] - hx2[55],
        hx1[56] - hx2[56],
        hx1[57] - hx2[57],
        hx1[58] - hx2[58],
        hx1[59] - hx2[59],
        hx1[60] - hx2[60],
        hx1[61] - hx2[61],
        hx1[62] - hx2[62],
        hx1[63] - hx2[63],
        hx1[64] - hx2[64],
        hx1[65] - hx2[65],
        hx1[66] - hx2[66],
        hx1[67] - hx2[67],
        hx1[68] - hx2[68],
        hx1[69] - hx2[69],
        hx1[70] - hx2[70],
        hx1[71] - hx2[71],
        hx1[72] - hx2[72],
        hx1[73] - hx2[73],
        hx1[74] - hx2[74],
        hx1[75] - hx2[75],
        hx1[76] - hx2[76],
        hx1[77] - hx2[77],
        hx1[78] - hx2[78],
        hx1[79] - hx2[79],
        hx1[80] - hx2[80],
        hx1[81] - hx2[81],
        hx1[82] - hx2[82],
        hx1[83] - hx2[83],
        hx1[84] - hx2[84],
        hx1[85] - hx2[85],
        hx1[86] - hx2[86],
        hx1[87] - hx2[87],
        hx1[88] - hx2[88],
        hx1[89] - hx2[89],
        hx1[90] - hx2[90],
        hx1[91] - hx2[91],
        hx1[92] - hx2[92],
        hx1[93] - hx2[93],
        hx1[94] - hx2[94],
        hx1[95] - hx2[95],
        hx1[96] - hx2[96],
        hx1[97] - hx2[97],
        hx1[98] - hx2[98],
        hx1[99] - hx2[99],
        hx1[100] - hx2[100],
        hx1[101] - hx2[101],
        hx1[102] - hx2[102],
        hx1[103] - hx2[103],
        hx1[104] - hx2[104],
        hx1[105] - hx2[105],
        hx1[106] - hx2[106],
        hx1[107] - hx2[107],
        hx1[108] - hx2[108],
        hx1[109] - hx2[109],
        hx1[110] - hx2[110],
        hx1[111] - hx2[111],
        hx1[112] - hx2[112],
        hx1[113] - hx2[113],
        hx1[114] - hx2[114],
        hx1[115] - hx2[115],
        hx1[116] - hx2[116],
        hx1[117] - hx2[117],
        hx1[118] - hx2[118],
        hx1[119] - hx2[119],
        hx1[120] - hx2[120],
        hx1[121] - hx2[121],
        hx1[122] - hx2[122],
        hx1[123] - hx2[123],
        hx1[124] - hx2[124],
        hx1[125] - hx2[125],
        hx1[126] - hx2[126],
        hx1[127] - hx2[127],
    ];
}

export function FFTDefault(x: Word): number[] {
    const l = x.length / 2;
    const x1 = x.slice(0, l);
    const x2 = x.slice(l);
    const hx1 = FFT(x1);
    const hx2 = FFT(x2);
    const r = [...hx1, ...hx1];
    for (let i = 0; i < l; i++) {
        r[i] += hx2[i];
        r[l + i] -= hx2[i];
    }
    return r;
}

export function FFT2BI(x: bigint): number[] {
    switch (x & 0b11n) {
        case 0n:
            return [2, 0];
        case 1n:
            return [0, 2];
        case 2n:
            return [0, -2];
        case 3n:
            return [-2, 0];
        default:
            return [2, 0];
    }
}

export function FFT4BI(x: bigint): number[] {
    const x1 = x >> 2n;
    const x2 = x & 0b11n;
    const hx1 = FFT2BI(x1);
    const hx2 = FFT2BI(x2);
    return [hx1[0] + hx2[0], hx1[1] + hx2[1], hx1[0] - hx2[0], hx1[1] - hx2[1]];
}

export function FFT8BI(x: bigint): number[] {
    const x1 = x >> 4n;
    const x2 = x & 0xfn;
    const hx1 = FFT4BI(x1);
    const hx2 = FFT4BI(x2);
    return [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
    ];
}

export const FFT16BICache = new Map<bigint, number[]>();

export function FFT16BI(x: bigint): number[] {
    const t = FFT16BICache.get(x);
    if (t) {
        return t;
    }
    const x1 = x >> 8n;
    const x2 = x & 0xffn;
    const hx1 = FFT8BI(x1);
    const hx2 = FFT8BI(x2);
    const r = [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[4] + hx2[4],
        hx1[5] + hx2[5],
        hx1[6] + hx2[6],
        hx1[7] + hx2[7],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
        hx1[4] - hx2[4],
        hx1[5] - hx2[5],
        hx1[6] - hx2[6],
        hx1[7] - hx2[7],
    ];
    FFT16BICache.set(x, r);
    return r;
}

export function FFT32BI(x: bigint): number[] {
    const x1 = x >> 16n;
    const x2 = x & 0xffffn;
    const hx1 = FFT16BI(x1);
    const hx2 = FFT16BI(x2);
    return [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[4] + hx2[4],
        hx1[5] + hx2[5],
        hx1[6] + hx2[6],
        hx1[7] + hx2[7],
        hx1[8] + hx2[8],
        hx1[9] + hx2[9],
        hx1[10] + hx2[10],
        hx1[11] + hx2[11],
        hx1[12] + hx2[12],
        hx1[13] + hx2[13],
        hx1[14] + hx2[14],
        hx1[15] + hx2[15],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
        hx1[4] - hx2[4],
        hx1[5] - hx2[5],
        hx1[6] - hx2[6],
        hx1[7] - hx2[7],
        hx1[8] - hx2[8],
        hx1[9] - hx2[9],
        hx1[10] - hx2[10],
        hx1[11] - hx2[11],
        hx1[12] - hx2[12],
        hx1[13] - hx2[13],
        hx1[14] - hx2[14],
        hx1[15] - hx2[15],
    ];
}

export function FFT64BI(x: bigint): number[] {
    const x1 = x >> 32n;
    const x2 = x & 0xffffffffn;
    const hx1 = FFT32BI(x1);
    const hx2 = FFT32BI(x2);
    return [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[4] + hx2[4],
        hx1[5] + hx2[5],
        hx1[6] + hx2[6],
        hx1[7] + hx2[7],
        hx1[8] + hx2[8],
        hx1[9] + hx2[9],
        hx1[10] + hx2[10],
        hx1[11] + hx2[11],
        hx1[12] + hx2[12],
        hx1[13] + hx2[13],
        hx1[14] + hx2[14],
        hx1[15] + hx2[15],
        hx1[16] + hx2[16],
        hx1[17] + hx2[17],
        hx1[18] + hx2[18],
        hx1[19] + hx2[19],
        hx1[20] + hx2[20],
        hx1[21] + hx2[21],
        hx1[22] + hx2[22],
        hx1[23] + hx2[23],
        hx1[24] + hx2[24],
        hx1[25] + hx2[25],
        hx1[26] + hx2[26],
        hx1[27] + hx2[27],
        hx1[28] + hx2[28],
        hx1[29] + hx2[29],
        hx1[30] + hx2[30],
        hx1[31] + hx2[31],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
        hx1[4] - hx2[4],
        hx1[5] - hx2[5],
        hx1[6] - hx2[6],
        hx1[7] - hx2[7],
        hx1[8] - hx2[8],
        hx1[9] - hx2[9],
        hx1[10] - hx2[10],
        hx1[11] - hx2[11],
        hx1[12] - hx2[12],
        hx1[13] - hx2[13],
        hx1[14] - hx2[14],
        hx1[15] - hx2[15],
        hx1[16] - hx2[16],
        hx1[17] - hx2[17],
        hx1[18] - hx2[18],
        hx1[19] - hx2[19],
        hx1[20] - hx2[20],
        hx1[21] - hx2[21],
        hx1[22] - hx2[22],
        hx1[23] - hx2[23],
        hx1[24] - hx2[24],
        hx1[25] - hx2[25],
        hx1[26] - hx2[26],
        hx1[27] - hx2[27],
        hx1[28] - hx2[28],
        hx1[29] - hx2[29],
        hx1[30] - hx2[30],
        hx1[31] - hx2[31],
    ];
}

export function FFT128BI(x: bigint): number[] {
    const x1 = x >> 64n;
    const x2 = x & 0xffffffffffffffffn;
    const hx1 = FFT64BI(x1);
    const hx2 = FFT64BI(x2);
    return [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[4] + hx2[4],
        hx1[5] + hx2[5],
        hx1[6] + hx2[6],
        hx1[7] + hx2[7],
        hx1[8] + hx2[8],
        hx1[9] + hx2[9],
        hx1[10] + hx2[10],
        hx1[11] + hx2[11],
        hx1[12] + hx2[12],
        hx1[13] + hx2[13],
        hx1[14] + hx2[14],
        hx1[15] + hx2[15],
        hx1[16] + hx2[16],
        hx1[17] + hx2[17],
        hx1[18] + hx2[18],
        hx1[19] + hx2[19],
        hx1[20] + hx2[20],
        hx1[21] + hx2[21],
        hx1[22] + hx2[22],
        hx1[23] + hx2[23],
        hx1[24] + hx2[24],
        hx1[25] + hx2[25],
        hx1[26] + hx2[26],
        hx1[27] + hx2[27],
        hx1[28] + hx2[28],
        hx1[29] + hx2[29],
        hx1[30] + hx2[30],
        hx1[31] + hx2[31],
        hx1[32] + hx2[32],
        hx1[33] + hx2[33],
        hx1[34] + hx2[34],
        hx1[35] + hx2[35],
        hx1[36] + hx2[36],
        hx1[37] + hx2[37],
        hx1[38] + hx2[38],
        hx1[39] + hx2[39],
        hx1[40] + hx2[40],
        hx1[41] + hx2[41],
        hx1[42] + hx2[42],
        hx1[43] + hx2[43],
        hx1[44] + hx2[44],
        hx1[45] + hx2[45],
        hx1[46] + hx2[46],
        hx1[47] + hx2[47],
        hx1[48] + hx2[48],
        hx1[49] + hx2[49],
        hx1[50] + hx2[50],
        hx1[51] + hx2[51],
        hx1[52] + hx2[52],
        hx1[53] + hx2[53],
        hx1[54] + hx2[54],
        hx1[55] + hx2[55],
        hx1[56] + hx2[56],
        hx1[57] + hx2[57],
        hx1[58] + hx2[58],
        hx1[59] + hx2[59],
        hx1[60] + hx2[60],
        hx1[61] + hx2[61],
        hx1[62] + hx2[62],
        hx1[63] + hx2[63],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
        hx1[4] - hx2[4],
        hx1[5] - hx2[5],
        hx1[6] - hx2[6],
        hx1[7] - hx2[7],
        hx1[8] - hx2[8],
        hx1[9] - hx2[9],
        hx1[10] - hx2[10],
        hx1[11] - hx2[11],
        hx1[12] - hx2[12],
        hx1[13] - hx2[13],
        hx1[14] - hx2[14],
        hx1[15] - hx2[15],
        hx1[16] - hx2[16],
        hx1[17] - hx2[17],
        hx1[18] - hx2[18],
        hx1[19] - hx2[19],
        hx1[20] - hx2[20],
        hx1[21] - hx2[21],
        hx1[22] - hx2[22],
        hx1[23] - hx2[23],
        hx1[24] - hx2[24],
        hx1[25] - hx2[25],
        hx1[26] - hx2[26],
        hx1[27] - hx2[27],
        hx1[28] - hx2[28],
        hx1[29] - hx2[29],
        hx1[30] - hx2[30],
        hx1[31] - hx2[31],
        hx1[32] - hx2[32],
        hx1[33] - hx2[33],
        hx1[34] - hx2[34],
        hx1[35] - hx2[35],
        hx1[36] - hx2[36],
        hx1[37] - hx2[37],
        hx1[38] - hx2[38],
        hx1[39] - hx2[39],
        hx1[40] - hx2[40],
        hx1[41] - hx2[41],
        hx1[42] - hx2[42],
        hx1[43] - hx2[43],
        hx1[44] - hx2[44],
        hx1[45] - hx2[45],
        hx1[46] - hx2[46],
        hx1[47] - hx2[47],
        hx1[48] - hx2[48],
        hx1[49] - hx2[49],
        hx1[50] - hx2[50],
        hx1[51] - hx2[51],
        hx1[52] - hx2[52],
        hx1[53] - hx2[53],
        hx1[54] - hx2[54],
        hx1[55] - hx2[55],
        hx1[56] - hx2[56],
        hx1[57] - hx2[57],
        hx1[58] - hx2[58],
        hx1[59] - hx2[59],
        hx1[60] - hx2[60],
        hx1[61] - hx2[61],
        hx1[62] - hx2[62],
        hx1[63] - hx2[63],
    ];
}

export function FFT256BI(x: bigint): number[] {
    const x1 = x >> 128n;
    const x2 = x & 0xffffffffffffffffffffffffffffffffn;
    const hx1 = FFT128BI(x1);
    const hx2 = FFT128BI(x2);
    return [
        hx1[0] + hx2[0],
        hx1[1] + hx2[1],
        hx1[2] + hx2[2],
        hx1[3] + hx2[3],
        hx1[4] + hx2[4],
        hx1[5] + hx2[5],
        hx1[6] + hx2[6],
        hx1[7] + hx2[7],
        hx1[8] + hx2[8],
        hx1[9] + hx2[9],
        hx1[10] + hx2[10],
        hx1[11] + hx2[11],
        hx1[12] + hx2[12],
        hx1[13] + hx2[13],
        hx1[14] + hx2[14],
        hx1[15] + hx2[15],
        hx1[16] + hx2[16],
        hx1[17] + hx2[17],
        hx1[18] + hx2[18],
        hx1[19] + hx2[19],
        hx1[20] + hx2[20],
        hx1[21] + hx2[21],
        hx1[22] + hx2[22],
        hx1[23] + hx2[23],
        hx1[24] + hx2[24],
        hx1[25] + hx2[25],
        hx1[26] + hx2[26],
        hx1[27] + hx2[27],
        hx1[28] + hx2[28],
        hx1[29] + hx2[29],
        hx1[30] + hx2[30],
        hx1[31] + hx2[31],
        hx1[32] + hx2[32],
        hx1[33] + hx2[33],
        hx1[34] + hx2[34],
        hx1[35] + hx2[35],
        hx1[36] + hx2[36],
        hx1[37] + hx2[37],
        hx1[38] + hx2[38],
        hx1[39] + hx2[39],
        hx1[40] + hx2[40],
        hx1[41] + hx2[41],
        hx1[42] + hx2[42],
        hx1[43] + hx2[43],
        hx1[44] + hx2[44],
        hx1[45] + hx2[45],
        hx1[46] + hx2[46],
        hx1[47] + hx2[47],
        hx1[48] + hx2[48],
        hx1[49] + hx2[49],
        hx1[50] + hx2[50],
        hx1[51] + hx2[51],
        hx1[52] + hx2[52],
        hx1[53] + hx2[53],
        hx1[54] + hx2[54],
        hx1[55] + hx2[55],
        hx1[56] + hx2[56],
        hx1[57] + hx2[57],
        hx1[58] + hx2[58],
        hx1[59] + hx2[59],
        hx1[60] + hx2[60],
        hx1[61] + hx2[61],
        hx1[62] + hx2[62],
        hx1[63] + hx2[63],
        hx1[64] + hx2[64],
        hx1[65] + hx2[65],
        hx1[66] + hx2[66],
        hx1[67] + hx2[67],
        hx1[68] + hx2[68],
        hx1[69] + hx2[69],
        hx1[70] + hx2[70],
        hx1[71] + hx2[71],
        hx1[72] + hx2[72],
        hx1[73] + hx2[73],
        hx1[74] + hx2[74],
        hx1[75] + hx2[75],
        hx1[76] + hx2[76],
        hx1[77] + hx2[77],
        hx1[78] + hx2[78],
        hx1[79] + hx2[79],
        hx1[80] + hx2[80],
        hx1[81] + hx2[81],
        hx1[82] + hx2[82],
        hx1[83] + hx2[83],
        hx1[84] + hx2[84],
        hx1[85] + hx2[85],
        hx1[86] + hx2[86],
        hx1[87] + hx2[87],
        hx1[88] + hx2[88],
        hx1[89] + hx2[89],
        hx1[90] + hx2[90],
        hx1[91] + hx2[91],
        hx1[92] + hx2[92],
        hx1[93] + hx2[93],
        hx1[94] + hx2[94],
        hx1[95] + hx2[95],
        hx1[96] + hx2[96],
        hx1[97] + hx2[97],
        hx1[98] + hx2[98],
        hx1[99] + hx2[99],
        hx1[100] + hx2[100],
        hx1[101] + hx2[101],
        hx1[102] + hx2[102],
        hx1[103] + hx2[103],
        hx1[104] + hx2[104],
        hx1[105] + hx2[105],
        hx1[106] + hx2[106],
        hx1[107] + hx2[107],
        hx1[108] + hx2[108],
        hx1[109] + hx2[109],
        hx1[110] + hx2[110],
        hx1[111] + hx2[111],
        hx1[112] + hx2[112],
        hx1[113] + hx2[113],
        hx1[114] + hx2[114],
        hx1[115] + hx2[115],
        hx1[116] + hx2[116],
        hx1[117] + hx2[117],
        hx1[118] + hx2[118],
        hx1[119] + hx2[119],
        hx1[120] + hx2[120],
        hx1[121] + hx2[121],
        hx1[122] + hx2[122],
        hx1[123] + hx2[123],
        hx1[124] + hx2[124],
        hx1[125] + hx2[125],
        hx1[126] + hx2[126],
        hx1[127] + hx2[127],
        hx1[0] - hx2[0],
        hx1[1] - hx2[1],
        hx1[2] - hx2[2],
        hx1[3] - hx2[3],
        hx1[4] - hx2[4],
        hx1[5] - hx2[5],
        hx1[6] - hx2[6],
        hx1[7] - hx2[7],
        hx1[8] - hx2[8],
        hx1[9] - hx2[9],
        hx1[10] - hx2[10],
        hx1[11] - hx2[11],
        hx1[12] - hx2[12],
        hx1[13] - hx2[13],
        hx1[14] - hx2[14],
        hx1[15] - hx2[15],
        hx1[16] - hx2[16],
        hx1[17] - hx2[17],
        hx1[18] - hx2[18],
        hx1[19] - hx2[19],
        hx1[20] - hx2[20],
        hx1[21] - hx2[21],
        hx1[22] - hx2[22],
        hx1[23] - hx2[23],
        hx1[24] - hx2[24],
        hx1[25] - hx2[25],
        hx1[26] - hx2[26],
        hx1[27] - hx2[27],
        hx1[28] - hx2[28],
        hx1[29] - hx2[29],
        hx1[30] - hx2[30],
        hx1[31] - hx2[31],
        hx1[32] - hx2[32],
        hx1[33] - hx2[33],
        hx1[34] - hx2[34],
        hx1[35] - hx2[35],
        hx1[36] - hx2[36],
        hx1[37] - hx2[37],
        hx1[38] - hx2[38],
        hx1[39] - hx2[39],
        hx1[40] - hx2[40],
        hx1[41] - hx2[41],
        hx1[42] - hx2[42],
        hx1[43] - hx2[43],
        hx1[44] - hx2[44],
        hx1[45] - hx2[45],
        hx1[46] - hx2[46],
        hx1[47] - hx2[47],
        hx1[48] - hx2[48],
        hx1[49] - hx2[49],
        hx1[50] - hx2[50],
        hx1[51] - hx2[51],
        hx1[52] - hx2[52],
        hx1[53] - hx2[53],
        hx1[54] - hx2[54],
        hx1[55] - hx2[55],
        hx1[56] - hx2[56],
        hx1[57] - hx2[57],
        hx1[58] - hx2[58],
        hx1[59] - hx2[59],
        hx1[60] - hx2[60],
        hx1[61] - hx2[61],
        hx1[62] - hx2[62],
        hx1[63] - hx2[63],
        hx1[64] - hx2[64],
        hx1[65] - hx2[65],
        hx1[66] - hx2[66],
        hx1[67] - hx2[67],
        hx1[68] - hx2[68],
        hx1[69] - hx2[69],
        hx1[70] - hx2[70],
        hx1[71] - hx2[71],
        hx1[72] - hx2[72],
        hx1[73] - hx2[73],
        hx1[74] - hx2[74],
        hx1[75] - hx2[75],
        hx1[76] - hx2[76],
        hx1[77] - hx2[77],
        hx1[78] - hx2[78],
        hx1[79] - hx2[79],
        hx1[80] - hx2[80],
        hx1[81] - hx2[81],
        hx1[82] - hx2[82],
        hx1[83] - hx2[83],
        hx1[84] - hx2[84],
        hx1[85] - hx2[85],
        hx1[86] - hx2[86],
        hx1[87] - hx2[87],
        hx1[88] - hx2[88],
        hx1[89] - hx2[89],
        hx1[90] - hx2[90],
        hx1[91] - hx2[91],
        hx1[92] - hx2[92],
        hx1[93] - hx2[93],
        hx1[94] - hx2[94],
        hx1[95] - hx2[95],
        hx1[96] - hx2[96],
        hx1[97] - hx2[97],
        hx1[98] - hx2[98],
        hx1[99] - hx2[99],
        hx1[100] - hx2[100],
        hx1[101] - hx2[101],
        hx1[102] - hx2[102],
        hx1[103] - hx2[103],
        hx1[104] - hx2[104],
        hx1[105] - hx2[105],
        hx1[106] - hx2[106],
        hx1[107] - hx2[107],
        hx1[108] - hx2[108],
        hx1[109] - hx2[109],
        hx1[110] - hx2[110],
        hx1[111] - hx2[111],
        hx1[112] - hx2[112],
        hx1[113] - hx2[113],
        hx1[114] - hx2[114],
        hx1[115] - hx2[115],
        hx1[116] - hx2[116],
        hx1[117] - hx2[117],
        hx1[118] - hx2[118],
        hx1[119] - hx2[119],
        hx1[120] - hx2[120],
        hx1[121] - hx2[121],
        hx1[122] - hx2[122],
        hx1[123] - hx2[123],
        hx1[124] - hx2[124],
        hx1[125] - hx2[125],
        hx1[126] - hx2[126],
        hx1[127] - hx2[127],
    ];
}
